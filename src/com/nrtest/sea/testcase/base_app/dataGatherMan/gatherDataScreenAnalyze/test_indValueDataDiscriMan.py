# -*- coding: utf-8 -*-"""@author: 韩笑@license: (C) Copyright 2018, Nari.@file: test_indValueDataDiscriMan.py@time: 2019-02-15 11:30:35@desc:"""from unittest import TestCasefrom ddt import ddt, datafrom com.nrtest.common.BeautifulReport import BeautifulReportfrom com.nrtest.common.assert_result import AssertResult
from com.nrtest.common.data_access import DataAccessfrom com.nrtest.sea.data.base_app.dataGatherMan.gatherDataScreenAnalyze.gatherDataScreenAnalyze_data import \    GatherDataScreenAnalyze_datafrom com.nrtest.sea.pages.base_app.dataGatherMan.gatherDataScreenAnalyze.indValueDataDiscriMan_page import \    IndValueDataDiscriManPagefrom com.nrtest.sea.pages.other.menu_page import MenuPage# 基本应用→数据采集管理→采集数据甄别分析→示值类数据甄别管理@ddtclass TestIndValueDataDiscriMan(TestCase, IndValueDataDiscriManPage):    @classmethod    def setUpClass(cls):        # 打开菜单（需要传入对应的菜单编号）        menuPage = MenuPage.openMenu(GatherDataScreenAnalyze_data.indValueDataDiscriMan_para)        super(TestCase, cls).__init__(cls, menuPage.driver, menuPage)        # 菜单页面没多个Tab页时，请注释clickTabPage所在行代码        # menuPage.clickTabPage()        # 菜单页面上如果没日期型的查询条件时，请注释下面代码        menuPage.remove_dt_readonly()    @classmethod    def tearDownClass(cls):        print("执行结束")        # 关闭菜单页面        cls.closePages(cls)    def setUp(self):        """        测试固件的setUp()的代码，主要是测试的前提准备工作        :return:        """    def tearDown(self):        """        每个测试用例测试结束后的操作，在这里做相关清理工作        :return:        """        # 回收左边树        self.recoverLeftTree()    def query(self, para):        """        :param para: Dict类型的字典，不是dict        ddt实现参数化（tst_case_detail数据表），通过key值，出入对应的值        key值要与tst_case_detail表中的XPATH_NAME的值保持一致        """        # 节点名        self.openLeftTree(para['TREE_NODE'])        # 用户编号        self.inputStr_cons_no(para['CONS_NO'])        # 用户名称        self.inputStr_cons_name(para['CONS_NAME'])        # 用户分类        self.inputSel_cons_type(para['CONS_TYPE'])        # 终端编号        self.inputStr_tmnl_no(para['TMNL_NO'])        # 终端名称        self.inputStr_tmnl_name(para['TMNL_NAME'])        # 终端类型        self.inputSel_tmnl_type(para['TMNL_TYPE'])        # 起始日期        self.inputDt_start_date(para['START_DATE'])        # 终止日期        self.inputDt_end_date(para['END_DATE'])        # 抄表例日        self.inputStr_meter_day(para['METER_DAY'])        # 电能表编号        self.inputStr_meter_no(para['METER_NO'])        # 电能表资产编号        self.inputStr_meter_asset_no(para['METER_ASSET_NO'])        # 甄别标志        self.inputSel_screen_sign(para['SCREEN_SIGN'])        # 台区编号        self.inputStr_tg_no(para['TG_NO'])        # 台区名称        self.inputStr_tg_name(para['TG_NAME'])        # 查询        self.btn_qry()    def assert_query_result(self, para):        """        查询结果校验（包括跳转）        :param para:        """        self.assertTrue(AssertResult(self).check_query_result(para))    def assert_query_criteria(self, para):        """        查询条件校验        :param para:        """        result = self.check_query_criteria(para)        self.assertTrue(result)    @BeautifulReport.add_test_img()    @data(*DataAccess.getCaseData(GatherDataScreenAnalyze_data.indValueDataDiscriMan_para))    def test_query(self, para):        """基本应用→数据采集管理→采集数据甄别分析→示值类数据甄别管理        """        self.start_case(para, __file__)        self.query(para)        self.assert_query_result(para)        self.end_case()    @BeautifulReport.add_test_img()    @data(*DataAccess.getCaseData(GatherDataScreenAnalyze_data.indValueDataDiscriMan_para, valCheck=True))    def _test_checkValue(self, para):        self.start_case(para, __file__)        self.query(para)        self.assert_query_criteria(para)        self.end_case()