# -*- coding: utf-8 -*-"""@author: 卢炎炎@license: (C) Copyright 2018, Nari.@file: test_consIntrgratedQuery_dayDataQry.py@time: 2019-02-26 14:59:34@desc:"""from asyncio import sleepfrom unittest import TestCasefrom ddt import ddt, datafrom com.nrtest.common.BeautifulReport import BeautifulReportfrom com.nrtest.common.data_access import DataAccessfrom com.nrtest.pbs.tree.tree_page import TreeSingleUserPagefrom com.nrtest.sea.data.stat_rey.synthQuery.synthQuery_data import SynthQuery_datafrom com.nrtest.sea.pages.other.menu_page import MenuPagefrom com.nrtest.sea.pages.stat_rey.synthQuery.consIntrgratedQuery_DataQry_page import ConsIntrgratedDayQueryPage# 统计查询→综合查询→单户综合查询:日抄表数据@ddtclass test_Consintrgratedquery(TestCase, ConsIntrgratedDayQueryPage):    @classmethod    def setUpClass(cls):        # 打开菜单（需要传入对应的菜单编号）        menuPage = MenuPage.openMenu(SynthQuery_data.consIntrgratedQuery_para)        super(TestCase, cls).__init__(cls, menuPage.driver, menuPage)        # 菜单页面没多个Tab页时，请注释clickTabPage所在行代码        # menuPage.clickTabPage(SynthQuery_data.consIntrgratedQuery_dayDataQry_tab)        # 菜单页面上如果没日期型的查询条件时，请注释下面代码        menuPage.remove_dt_readonly()    @classmethod    def tearDownClass(cls):        print("执行结束")        # 关闭菜单页面        cls.closePages(cls)    def setUp(self):        """        测试固件的setUp()的代码，主要是测试的前提准备工作        :return:        """    def tearDown(self):        """        每个测试用例测试结束后的操作，在这里做相关清理工作        :return:        """        # 回收左边树        self.recoverLeftTree()    def query(self, para):        """        :param para: Dict类型的字典，不是dict        ddt实现参数化（tst_case_detail数据表），通过key值，出入对应的值        key值要与tst_case_detail表中的XPATH_NAME的值保持一致        """        sleep(0.5)        user_page = TreeSingleUserPage(self)        user_page.openLeftTree(para['NODE'])        sleep(2)        # 打开左边树并选择        self.openLeftTree(para['TREE_NODE'])        sleep(1)        # 筛选用户信息        user_page.user_query(para['USER_INFO'])        # 从        self.inputDt_start_date(para['START_DATE'])        # 到        self.inputDt_end_date(para['END_DATE'])        # 数据类型        self.inputChk_data_type(para['DATA_TYPE'])        # 查询        self.btn_qry()    def assert_query_result(self, para):        """        查询结果校验（包括跳转）        :param para:        """        self.assertTrue(self.check_query_result(para))    def assert_query_criteria(self, para):        """        查询条件校验        :param para:        """        result = self.check_query_criteria(para)        self.assertTrue(result)    @BeautifulReport.add_test_img()    @data(*DataAccess.getCaseData(SynthQuery_data.consIntrgratedQuery_para, SynthQuery_data.consIntrgratedQuery_dayDataQry_tab))    def test_query(self, para):        """统计查询→综合查询→单户综合查询:日抄表数据        """        self.start_case(para, __file__)        self.query(para)        self.assert_query_result(para)        self.end_case()    @BeautifulReport.add_test_img()    @data(*DataAccess.getCaseData(SynthQuery_data.consIntrgratedQuery_para, SynthQuery_data.consIntrgratedQuery_dayDataQry_tab, valCheck=True))    def _test_checkValue(self, para):        self.start_case(para, __file__)        self.query(para)        self.assert_query_criteria(para)        self.end_case()